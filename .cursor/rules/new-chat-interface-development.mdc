---
description:
globs:
alwaysApply: false
---
# 新聊天界面开发指南

## 基于现有架构开发新界面
本规则指导如何基于Chat Copilot现有架构开发新的聊天界面，如医疗AI助手、教育助手等专业化应用。

## 复用现有后端API
### 核心聊天API
无需修改后端，直接使用现有API：
```http
POST /chats/{chatId}/messages
```

### 参考现有控制器
- [webapi/Controllers/ChatController.cs](mdc:webapi/Controllers/ChatController.cs) - 主要聊天控制器
- [webapi/Controllers/ChatHistoryController.cs](mdc:webapi/Controllers/ChatHistoryController.cs) - 历史管理
- [webapi/Controllers/DocumentController.cs](mdc:webapi/Controllers/DocumentController.cs) - 文档处理

## 前端组件开发模式
### 参考现有组件结构
基于 [webapp/src/components/chat/](mdc:webapp/src/components/chat/) 的组件架构：

```typescript
// 新聊天界面组件结构
NewChatInterface/
├── NewChatApp.tsx           // 主容器组件
├── NewChatHeader.tsx        // 头部组件  
├── NewChatRoom.tsx          // 聊天室组件
├── NewChatHistory.tsx       // 消息历史
├── NewChatInput.tsx         // 输入组件
└── hooks/
    └── useNewChat.ts        // 业务逻辑Hook
```

### 复用核心Hook
```typescript
import { useChat } from '../../../libs/hooks/useChat';

const useNewChat = () => {
    const chat = useChat();  // 复用现有Hook
    
    const handleSendMessage = async (message: string) => {
        await chat.getResponse({
            messageType: ChatMessageType.Message,
            value: message,
            chatId: selectedChatId
        });
    };
    
    return {
        ...chat,
        handleSendMessage,
        // 添加新的业务逻辑
    };
};
```

## SignalR集成
### 复用现有连接
```typescript
import { getOrCreateHubConnection } from '../redux/features/message-relay/signalRHubConnection';

// 在新组件中使用相同的SignalR连接
const hubConnection = getOrCreateHubConnection(store);

// 监听相同的事件
hubConnection.on('ReceiveMessage', handleReceiveMessage);
hubConnection.on('ReceiveMessageUpdate', handleMessageUpdate);
hubConnection.on('ReceiveBotResponseStatus', handleStatusUpdate);
```

### 流式输出集成
新界面自动获得流式输出功能，无需额外开发。

## 状态管理
### Redux集成
```typescript
// 复用现有Redux状态
import { useAppSelector, useAppDispatch } from '../redux/app/hooks';

const NewChatComponent = () => {
    const { conversations, selectedId } = useAppSelector(
        (state: RootState) => state.conversations
    );
    const dispatch = useAppDispatch();
    
    // 使用现有actions
    dispatch(addMessageToConversationFromUser({ message, chatId }));
};
```

## 定制化开发
### 系统描述定制
```json
// 在appsettings.json中为新界面定制系统描述
"Prompts": {
    "SystemDescription": "你是一个专业的医疗AI助手，具备丰富的医学知识...",
    "InitialBotMessage": "您好，我是您的医疗AI助手，请问有什么可以帮助您的？"
}
```

### UI样式定制
```typescript
import { makeStyles } from '@fluentui/react-components';

const useNewChatStyles = makeStyles({
    container: {
        backgroundColor: '#f0f8ff',  // 定制背景色
        // 其他定制样式
    },
    // 保持核心布局，定制视觉效果
});
```

## 专业化扩展示例
### 医疗AI助手
参考已实现的医生聊天界面：
- 专业术语支持
- 患者信息集成
- 医疗记录管理
- 诊断辅助功能

### 教育AI助手
```typescript
interface EducationChatProps {
    studentLevel: 'elementary' | 'middle' | 'high' | 'college';
    subject: string;
    learningObjectives: string[];
}

const EducationChatInterface: React.FC<EducationChatProps> = ({
    studentLevel,
    subject,
    learningObjectives
}) => {
    // 基于学习目标定制聊天体验
    const customPrompt = generateEducationPrompt(studentLevel, subject, learningObjectives);
    
    return <BaseChatInterface systemPrompt={customPrompt} />;
};
```

## 插件扩展
### 自定义插件开发
```csharp
// 为新界面开发专用插件
[KernelFunction, Description("Education assistance function")]
public async Task<string> EducationAssistAsync(
    [Description("Student question")] string question,
    [Description("Subject area")] string subject,
    [Description("Difficulty level")] string level,
    CancellationToken cancellationToken = default)
{
    // 教育助手专用逻辑
    return "Educational response";
}
```

### 插件配置
```json
"Plugins": [
    {
        "Name": "Education Plugin",
        "ManifestDomain": "https://education-plugin.example.com"
    }
]
```

## 数据隔离
### 独立存储配置
```json
// 为新界面配置独立存储
"ChatStore": {
    "Type": "filesystem",
    "Filesystem": {
        "FilePath": "./data/medical-chatstore.json"  // 独立存储文件
    }
}
```

### 会话管理
```typescript
// 创建专用会话类型
interface MedicalChatSession extends IChatSession {
    patientId?: string;
    doctorId?: string;
    medicalContext?: string;
}
```

## 性能优化
### 组件懒加载
```typescript
const NewChatInterface = React.lazy(() => import('./NewChatInterface'));

// 在路由中使用
<Suspense fallback={<LoadingSpinner />}>
    <NewChatInterface />
</Suspense>
```

### 内存管理
```typescript
useEffect(() => {
    // 组件卸载时清理资源
    return () => {
        // 清理SignalR监听器
        // 清理定时器
        // 清理订阅
    };
}, []);
```

## 测试策略
### 单元测试
```typescript
// 测试新的业务逻辑Hook
describe('useNewChat', () => {
    it('should handle custom message types', () => {
        // 测试定制化功能
    });
});
```

### 集成测试
```typescript
// 测试与现有系统的集成
describe('NewChatInterface Integration', () => {
    it('should work with existing SignalR connection', () => {
        // 测试SignalR集成
    });
});
```

## 部署配置
### 独立部署
可以将新界面作为独立应用部署，共享同一个后端API：
```yaml
# docker-compose.yml
services:
  medical-chat-ui:
    build: ./medical-chat-ui
    ports:
      - "8441:80"
    environment:
      - REACT_APP_API_URL=http://webapi:40443
```

### 路由集成
或者集成到现有前端应用中：
```typescript
// 在现有路由中添加新界面
const routes = [
    { path: '/chat', component: ChatView },
    { path: '/medical-chat', component: MedicalChatInterface },
    { path: '/education-chat', component: EducationChatInterface },
];
```

## 最佳实践
1. **保持兼容性**: 不修改现有API，通过配置和扩展实现定制
2. **组件复用**: 最大化复用现有组件和逻辑
3. **渐进增强**: 在现有功能基础上增加专业化特性
4. **独立测试**: 确保新功能不影响现有系统
5. **文档完善**: 详细记录定制化配置和使用方法
